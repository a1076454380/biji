1.基础：
	数据类型
		布尔值、数值、字符串、null、undefined 
		let isDone: boolean = false;
		let decLiteral: number = 6;
		let myName: string = 'Tom';
		let unusable: void = undefined;
		let myFavoriteNumber: any = 'seven';
	类型推论
		如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。
			let myFavoriteNumber = 'seven';
			myFavoriteNumber = 7;
			
			// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.
			事实上，它等价于：
			
			let myFavoriteNumber: string = 'seven';
			myFavoriteNumber = 7;
			
	联合类型
		let myFavoriteNumber: string | number;
		myFavoriteNumber = 'seven';
		myFavoriteNumber = 7;
			
		当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法：

		function getLength(something: string | number): number {
		    return something.length;
		}
		上例中，length 不是 string 和 number 的共有属性，所以会报错。
		访问 string 和 number 的共有属性是没问题的：

		function getString(something: string | number): string {
		    return something.toString();
		}
		
	对象的类型-接口（类似于自定义对象）
	interface Person {
	    name: string;
	    age: number;
	}
	
	let tom: Person = {
	    name: 'Tom',
	    age: 25
	};
	定义的变量比接口少了一些属性是不允许的：

		interface Person {
		    name: string;
		    age: number;
		}
		
		let tom: Person = {
		    name: 'Tom'
		};
		
	多一些属性也是不允许的：

		interface Person {
		    name: string;
		    age: number;
		}
		
		let tom: Person = {
		    name: 'Tom',
		    age: 25,
		    gender: 'male'
		};
	
	可选属性
		有时我们希望不要完全匹配一个形状，那么可以用可选属性：
		
		interface Person {
		    name: string;
		    age?: number;
		}
		
		let tom: Person = {
		    name: 'Tom'
		};
		interface Person {
		    name: string;
		    age?: number;
		}
		
		let tom: Person = {
		    name: 'Tom',
		    age: 25
		};
		
	任意属性
		有时候我们希望一个接口允许有任意的属性，可以使用如下方式：
		
		interface Person {
		    name: string;
		    age?: number;
		    [propName: string]: any;
		}
		
		let tom: Person = {
		    name: 'Tom',
		    gender: 'male'
		};
		需要注意的是，一旦定义了任意属性，那么确定属性和可选属性都必须是它的子属性：
		
		interface Person {
		    name: string;
		    age?: number;
		    [propName: string]: string;
		}
		
		let tom: Person = {
		    name: 'Tom',
		    age: 25,
		    gender: 'male'
		};
		
		上例中，任意属性的值允许是 string，但是可选属性 age 的值却是 number，number 不是 string 的子属性，所以报错了。

		只读属性
			有时候我们希望对象中的一些字段只能在创建的时候被赋值，那么可以用 readonly 定义只读属性：
			
			interface Person {
			    readonly id: number;
			    name: string;
			    age?: number;
			    [propName: string]: any;
			}
			
			let tom: Person = {
			    id: 89757,
			    name: 'Tom',
			    gender: 'male'
			};
			
			tom.id = 9527;

定义数组
	最简单的方法是使用「类型 + 方括号」来表示数组：

	let fibonacci: number[] = [1, 1, 2, 3, 5];
	数组的项中不允许出现其他的类型：
	
		any 在数组中的应用
		一个比较常见的做法是，用 any 表示数组中允许出现任意类型：
		
		let list: any[] = ['Xcat Liu', 25, { website: 'http://xcatliu.com' }];
		
定义函数
	let mySum = function (x: number, y: number): number {
	    return x + y;
	};
	
	function buildName(firstName: string, lastName?: string) {
	    if (lastName) {
	        return firstName + ' ' + lastName;
	    } else {
	        return firstName;
	    }
	}
	let tomcat = buildName('Tom', 'Cat');
	let tom = buildName('Tom');
	
	function buildName(firstName: string, lastName: string = 'Cat') {
	    return firstName + ' ' + lastName;
	}
	let tomcat = buildName('Tom', 'Cat');
	let tom = buildName('Tom');
	
	
声明文件
当使用第三方库时，我们需要引用它的声明文件。
		假如我们想使用第三方库，比如 jQuery，我们通常这样获取一个 id 是 foo 的元素：
		
		$('#foo');
		// or
		jQuery('#foo');
		但是在 TypeScript 中，我们并不知道 $ 或 jQuery 是什么东西：
		
		jQuery('#foo');
		
		// index.ts(1,1): error TS2304: Cannot find name 'jQuery'.
		这时，我们需要使用 declare 关键字来定义它的类型，帮助 TypeScript 判断我们传入的参数类型对不对：
		
		declare var jQuery: (selector: string) => any;
		
		jQuery('#foo');
		declare 定义的类型只会用于编译时的检查，编译结果中会被删除。
		
		上例的编译结果是：
		
		jQuery('#foo');





















