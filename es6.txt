1.let和const
	1.1
		用let声明的变量只能在当前代码块有效
			例：
				var a=[];
				for(var i=0;i<6;i++){
					a[i]=function(){
						console.log(i)
					}
				}
				a[3]输出的是6
				for(let i=0;i<6;i++){
					a[i]=function(){
						console.log(i)
					}
				}
				a[3]输出的是3
	1.2
		const定义一个只读变量
		作用域与let一样
		不可重复声明，不可提升，存在暂时性死区
2.变量的结构性赋值
	2.1
		数组性赋值
			let a=1;
			let b=2;
			let c=3
		es6:
			let[a,b,c]=[1,2,3]
	2.2
		对象性赋值
			let {a,b}={a:'a',b:'b'}
	2.3
		字符串结构赋值
			let [a,b,b,d,e]='dxiao'
	2.4
		属性结构赋值
			let [length:len]='hellow';
			len:5
3.arrow function
	function(){alert(i)}
	es6:
		()=>alert(i)
		如果方程相对复杂，则需要在外层添加{}
		()=>{alert(i)}
4.模板字符串
	``
	传统插入模板:
		$("#result").append(
	  		"There are <b>" + basket.count + "</b> " +
	  		"items in your basket, " +
	  		"<em>" + basket.onSale +
	  		"</em> are on sale!"
		);
	es6:
		$("#result").append(`
 			There are <b>${basket.count}</b> items
   			in your basket, <em>${basket.onSale}</em>
  			are on sale!
		`);
	空格和换行将会保留如果想去除需要用trim
		$('#list').html(`
						<ul>
						  <li>first</li>
						  <li>second</li>
						</ul>
						`.trim());
	4.1
		模板字符串中可以放入函数
			function fn() {
			  return "Hello World";
			}
			
			`foo ${fn()} bar`
			// foo Hello World bar
	4.2
		模板字符串中可以放入变量 ${}
			var msg = `Hello, ${place}`;
5.遍历字符串
	for (let i of shuzu) {
  		console.log(i)
	}
	输出
		f,o,o
	5.1
		includes()，返回布尔值，表示是否找到了参数字符串。
		startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。
		endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。
		这三个方法都支持第二个参数，表示开始搜索的位置。
		var s = 'Hello world!';

		s.startsWith('world', 6) // true
		s.endsWith('Hello', 5) // true
		s.includes('Hello', 6) // false	
		
		上面代码表示，使用第二个参数n时，endsWith的行为与其他两个方法有所不同。
		它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。	
	5.2
		repeat()
		repeat方法返回一个新字符串，表示将原字符串重复n次。
		'x'.repeat(3) // "xxx"
		'hello'.repeat(2) // "hellohello"
		'na'.repeat(0) // ""
		参数如果是小数，会被向前取整。
		如果repeat的参数是负数或者Infinity，会报错。
		但是，如果参数是0到-1之间的小数，则等同于0，这是因为会先进行取整运算。0到-1之间的小数，取整以后等于-0，repeat视同为0。
		参数NaN等同于0。
		如果repeat的参数是字符串，则会先转换成数字。
6.
	6.1
		padStart()用于头部补全，padEnd()用于尾部补全。
		'x'.padStart(5, 'ab') // 'ababx'
		'x'.padStart(4, 'ab') // 'abax'
	
		'x'.padEnd(5, 'ab') // 'xabab'
		'x'.padEnd(4, 'ab') // 'xaba'
	6.2
		如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串。
	6.3
		如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串。
		'abc'.padStart(10, '0123456789')
		// '0123456abc'
	6.4
		如果省略第二个参数，默认使用空格补全长度。
	6.5
		padStart的常见用途是为数值补全指定位数。下面代码生成10位的数值字符串。
		'1'.padStart(10, '0') // "0000000001"
		'12'.padStart(10, '0') // "0000000012"
		'123456'.padStart(10, '0') // "0000123456"
	6.6
		另一个用途是提示字符串格式。
		'12'.padStart(10, 'YYYY-MM-DD') // "YYYY-MM-12"
		'09-12'.padStart(10, 'YYYY-MM-DD') // "YYYY-09-12"
7.
	数值的扩展
		7.1
			Number.isNaN()用来检查一个值是否为NaN。
			Number.isNaN(NaN) // true
			Number.isNaN(15) // false
			Number.isNaN('15') // false
			Number.isNaN(true) // false
			Number.isNaN(9/NaN) // true
			Number.isNaN('true'/0) // true
			Number.isNaN('true'/'true') // true
		7.2
			Number.isInteger()用来判断一个值是否为整数。
			需要注意的是，在 JavaScript 内部，整数和浮点数是同样的储存方法，所以3和3.0被视为同一个值。
			Number.isInteger(25) // true
			Number.isInteger(25.0) // true
			Number.isInteger(25.1) // false
			Number.isInteger("15") // false
			Number.isInteger(true) // false
		7.3
			Math.trunc方法用于去除一个数的小数部分，返回整数部分。
			Math.trunc(4.1) // 4
			Math.trunc(4.9) // 4
			Math.trunc(-4.1) // -4
			Math.trunc(-4.9) // -4
			Math.trunc(-0.1234) // -0
		7.4
			对于非数值，Math.trunc内部使用Number方法将其先转为数值。
		7.5
			对于空值和无法截取整数的值，返回NaN。
		7.6
			Math.sign方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。
			参数为正数，返回+1；
			参数为负数，返回-1；
			参数为0，返回0；
			参数为-0，返回-0;
			其他值，返回NaN。
8.函数的扩展
	ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。
		function log(x, y = 'World') {
		  console.log(x, y);
		}
		
		log('Hello') // Hello World
		log('Hello', 'China') // Hello China
		log('Hello', '') // Hello