var res = Mock.mock({
      'list|10': [{
        'id|+1': 1,
        'img': "@image('200x100', '#4A7BF7','#fff','pic')",
        'city': "@county(true)",
        'marketing_start': '@datetime()',
        'marketing_stop': '@now()',
        'price': '@integer(100,2000)',
        'original_price': '@integer(100,3000)',
        'title': '@ctitle(3,8)',
        'price|10-500.1-2':1,
        'Kcun|1-1':true,
        'name|5':{
          "name":123,
          "age":45,
          "sex":1,
          "ok": 0,
          "name1": 123,
          "age1": 45,
          "sex1": 1,
          "ok1": 0
        },
        'regexp1': /[a-z][A-Z][0-9]/,
        'regexp2': /\w\W\s\S\d\D/,
        'regexp3': /\d{5,10}/
      }]
    })
第一步：
	bower=>mockjs
	在utils中引入mock.js
第二部：
	创建api.js
	let API_HOST = "http://xxx.com/xxx";
	let DEBUG = true;//切换数据入口
	var Mock = require('mock.js')
	function ajax(data = '', fn, method = "get", header = {}) {
	  if (!DEBUG) {
	    wx.request({
	      url: config.API_HOST + data,
	      method: method ? method : 'get',
	      data: {},
	      header: header ? header : { "Content-Type": "application/json" },
	      success: function (res) {
	        fn(res);
	      }
	    });
	  } else {
	    // 模拟数据
	    var res = Mock.mock({
	      'list|10': [{
	        'id|+1': 1,
	        'img': "@image('200x100', '#4A7BF7','#fff','pic')",
	        'city': "@county(true)",
	        'marketing_start': '@datetime()',
	        'marketing_stop': '@now()',
	        'price': '@integer(100,2000)',
	        'original_price': '@integer(100,3000)',
	        'title': '@ctitle(3,8)',
	        'price|10-500.1-2':1,
	        'Kcun|1-1':true,
	        'name|5':{
	          "name":123,
	          "age":45,
	          "sex":1,
	          "ok": 0,
	          "name1": 123,
	          "age1": 45,
	          "sex1": 1,
	          "ok1": 0
	        },
	        'regexp1': /[a-z][A-Z][0-9]/,
	        'regexp2': /\w\W\s\S\d\D/,
	        'regexp3': /\d{5,10}/
	      }]
	    })
	    // 输出结果
	    // console.log(JSON.stringify(res, null, 2))
	    fn(res);
	  }
	}
	module.exports = {
	  ajax: ajax
	}
	Mock.mock中即为数据结构
第三部：
	页眉引入js
		var app = getApp()
		var API = require('../../utils/api.js')
	 onLoad: function (options) {
	    var that = this
	    // 使用 Mock
	    API.ajax('', function (res) {
	      //这里既可以获取模拟的res
	      console.log(res)
	      that.setData({
	        list: res.data
	      })
	    });
	
	    console.log(this.data.list)
	  },
	  通过Api.ajax获取数据
	  ========================================mock语法格式==========================================
	  1.数据模板中的每个属性由 3 部分构成：属性名、生成规则、属性值：
	  	// 属性名   name
		// 生成规则 rule
		// 属性值   value
		'name|rule': value
	1. 属性值是字符串 String

		'name|min-max': string
		
		通过重复 string 生成一个字符串，重复次数大于等于 min，小于等于 max。
		
		'name|count': string
		
		通过重复 string 生成一个字符串，重复次数等于 count。
	2. 属性值是数字 Number

		'name|+1': number
		
		属性值自动加 1，初始值为 number。
		
		'name|min-max': number
		
		生成一个大于等于 min、小于等于 max 的整数，属性值 number 只是用来确定类型。
		
		'name|min-max.dmin-dmax': number
		
		生成一个浮点数，整数部分大于等于 min、小于等于 max，小数部分保留 dmin 到 dmax 位。
		Mock.mock({
		    'number1|1-100.1-10': 1,
		    'number2|123.1-10': 1,
		    'number3|123.3': 1,
		    'number4|123.10': 1.123
		})
		// =>
		{
		    "number1": 12.92,
		    "number2": 123.51,
		    "number3": 123.777,
		    "number4": 123.1231091814
		}
	3. 属性值是布尔型 Boolean

		'name|1': boolean
		
		随机生成一个布尔值，值为 true 的概率是 1/2，值为 false 的概率同样是 1/2。
		
		'name|min-max': value
		
		随机生成一个布尔值，值为 value 的概率是 min / (min + max)，值为 !value 的概率是 max / (min + max)。
	4. 属性值是对象 Object

		'name|count': object
		
		从属性值 object 中随机选取 count 个属性。
		
		'name|min-max': object
		
		从属性值 object 中随机选取 min 到 max 个属性。
	5. 属性值是数组 Array

		'name|1': array
		
		从属性值 array 中随机选取 1 个元素，作为最终值。
		
		'name|+1': array
		
		从属性值 array 中顺序选取 1 个元素，作为最终值。
		
		'name|min-max': array
		
		通过重复属性值 array 生成一个新数组，重复次数大于等于 min，小于等于 max。
		
		'name|count': array
		
		通过重复属性值 array 生成一个新数组，重复次数为 count。
	6. 属性值是函数 Function

		'name': function
		
		执行函数 function，取其返回值作为最终的属性值，函数的上下文为属性 'name' 所在的对象。
	7. 属性值是正则表达式 RegExp

		'name': regexp
		
		根据正则表达式 regexp 反向生成可以匹配它的字符串。用于生成自定义格式的字符串。
		
		Mock.mock({
		    'regexp1': /[a-z][A-Z][0-9]/,
		    'regexp2': /\w\W\s\S\d\D/,
		    'regexp3': /\d{5,10}/
		})
		// =>
		{
		    "regexp1": "pJ7",
		    "regexp2": "F)\fp1G",
		    "regexp3": "561659409"
		}
	8.占位符
		数据占位符定义规范 DPD

		占位符 只是在属性值字符串中占个位置，并不出现在最终的属性值中。
		
		占位符 的格式为：
		
		@占位符
		@占位符(参数 [, 参数])
		注意：
		
		用 @ 来标识其后的字符串是 占位符。
		占位符 引用的是 Mock.Random 中的方法。
		通过 Mock.Random.extend() 来扩展自定义占位符。
		占位符 也可以引用 数据模板 中的属性。=
		占位符 会优先引用 数据模板 中的属性。
		占位符 支持 相对路径 和 绝对路径。
		Mock.mock({
		    name: {
		        first: '@FIRST',
		        middle: '@FIRST',
		        last: '@LAST',
		        full: '@first @middle @last'
		    }
		})
		// =>
		{
		    "name": {
		        "first": "Charles",
		        "middle": "Brenda",
		        "last": "Lopez",
		        "full": "Charles Brenda Lopez"
		    }
		}
		===================系统自带占位符================
		图片生成
			'img': "@image('200x100', '#4A7BF7','#fff','pic')",
		城市
			'city': "@county(true)",
		随机时间
			'marketing_start': '@datetime()',
		当前时间
			'marketing_stop': '@now()',
		价格（随机数）
			'price': '@integer(100,2000)'
		文字（名字）
			 'title': '@ctitle(3,8)',
		