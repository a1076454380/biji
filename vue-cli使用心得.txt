1.
	main.js是入口文件，所有的文件最后都回到这里汇总
2.
	index.html是最终显示的页面一些reset之类的可以在这里直接引入
3.
	App.vue是离index.html最近的模板，直接对index.html负责，所有的模板和组件都要挂载到App.vue在进入index.html
4.
	需要直接显示的不通过路由的模板在component是文件夹下创建没在APp.vue中import引入
	在App.vue中的export {components{vheader;header}} 注册 导出
5.
	需要通过路由引入的模板
	需要现在router文件夹下的index.js中import 然后再 export default new Router({
		{
			path:'/',
			name:'',
			components:模板名（即上面import引入时起的名字）
		}
	})
	<router-link to="/home"></router-link>
	App.vue中还需要写一个<router-view/>来显示路由
	路由中引入模板与引入module有所不同需要在路径前加@/
6.
	路由被选中时会添加类.router-link-active
	所以可以通过给这个类设置样式来完成选中路由的高亮
	也可以在New Router创建实例是进行改变配置newrouter({linkactive；active})
7.1像素的实现
	挡在pc端设置1像素时预览效果是对的
	但在移动端是会随着设备像素比（dpr）而变大
8.vue-resource的使用
	get方法并不能直接获取到本地文件，想要获取数据有两种方法
	 	1.
	 		将文件放到static目录下进行访问
	 	2.
	 		在dev.server.js配置
	 		const app=eapress()
	 		引入json
	 		var appDat=require('../data.json')	
	 		获取详细分类数据
			var seller=appDat.seller
			var goods=appData.goods
			var ratings=appData.ratings
			实例化路由
			var apiRouters=express.Router()
			配置路由
			apiRouters.get('/seller',function(){
				res.json({
					errno:0;
					data:seller
				})
			})
			apiRouters.get('/goods',function(){
				res.json({
					errno:0;
					data:goods
				})
			})
			apiRouters.get('/ratings',function(){
				res.json({
					errno:0;
					data:ratings
				})
			})
			加载路由
			app.use('/api',apiRouters)
9.vue-router的使用
	9.1引入路由
		import Routers from 'vue-router'
	9.2引入文件
		import seller from '@cpmponents/seller/seller'
	9.3使用路由
		Vue.use(Routers)
	9.4配置路由
		router:[
			{
				path:'/seller',
				component:seller
			},{
				path:'*'
				redirect;'/seller'
			}
		]
	9.5router-link和router-view引入路径
10.循环嵌套
	<ul>
		<li v-for='item in items'>
			<ul>
				<li v-for='ite in item.good'>
					{{ite.name}}
				</li>
			</ul>
		</li>
	</ul>
11.better-scroll实现
	11.1npm 安装依赖
		cnpm instlla better-scroll --save-dev
	11.2引入
		import Bscroll from 'better-scroll'
	11.3布局书写
		div class='wrapper' ref='tabWrapper'>外层盒子定宽高
			<ul>
				<li>
					
				<li>
			</ul>
		</div>
	11.4js函数初始化
	methods:{
		_initBscroll(){
			this.tabWrapper=new Bscroll(this.$refs.tabWrapper,{})
		}
	}
12.better-scroll的使用(类似美团的左右联动效果)
		12.1
			npm install better-scroll --save-dev
		12.2
			<div class="shop-wrapper" ref="foodWrapper">
			this.foodScroll=new Bscoll(this.$refs.foodWrapper,{
					click:true,
					probeType:3
				})
			this.foodScroll.on('scroll',(pos)=>{
					this.scrollY=Math.abs(Math.round(pos.y))
				})
		<script>
			import Bscoll from 'better-scroll'
			export default{
				props:{
					seller:{
						type:Object
					}
				},
				data(){
					return{
						goods:[],
						arrHeight:[],
						scrollY:0
					}
				},
				created(){
					this.$http.get('/api/goods').then((res)=>{
						res=res.body
				  		if(res.errno==0){
				  			this.goods=res.data
				  			this.$nextTick(()=>{
				  				this._initScroll();
				  				this.arrheight()
				  			})
				  			
				  		}
					})
				},
				computed:{
					listactive:function(){
						for(let i=0;i<this.arrHeight.length;i++){
							if(this.scrollY>=this.arrHeight[i]&&this.scrollY<this.arrHeight[i+1]){
								return i;
							}
						}
						return 0;
					}
				},
				methods:{
					_initScroll(){
						this.tabWrapper=new Bscoll(this.$refs.tabWrapper,{
							click:true
						})
						this.foodScroll=new Bscoll(this.$refs.foodWrapper,{
							click:true,
							probeType:3
						})
						this.foodScroll.on('scroll',(pos)=>{
							this.scrollY=Math.abs(Math.round(pos.y))
						})
					},
					arrheight(){
						var items=document.getElementsByClassName('goods-list');
						for(let i=0;i<items.length;i++){
							var scrolltop=items[i].offsetTop;
							this.arrHeight.push(scrolltop);
						}
					},
					tabactive(index,event){
						let foodList=document.getElementsByClassName('goods-list');
						let el=foodList[index]
						this.foodScroll.scrollToElement(el,300)
					}
				}
			}
13mock数据
	
var data=require('../data.json')
var seller=data.seller
var goods=data.goods
var ratings=data.ratings

var apiRouters=express.Router()

apiRouters.get('/seller',function(req,res){
	res.json({
		errno:0,
		data:seller
	})
})
apiRouters.get('/goods',function(req,res){
	res.json({
		errno:0,
		data:goods
	})
})
apiRouters.get('/ratings',function(req,res){
	res.json({
		errno:0,
		data:ratings
	})
})
app.use('/api',apiRouters)