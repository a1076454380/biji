	1.安装nodejs
	2.安装vue-cli
	3.初始化项目vue init webpack 项目名称
	4.cd 项目名称
	5.安装依赖npm install
	6.开始运行npm run dev
	使用sass
		npm install node-sass --save-dev  
		npm install sass-loader --save-dev 
		{  
	        test: /\.scss$/,  
	        loaders: ["style", "css", "sass"]  
	      },  
		<style lang="scss" scoped="" type="text/css"></style>  
	使用axios
	    npm install axios -s
	    在main.js引入
	    import axios form 'axios'
	  改写原型链
	  	Vue.prototype.axios=axios
	 使用
	 	this.axios.get(this.url + '/queryuserCarsouelAll').then((res) => {
					console.log(res)
				}).catch((err) => {
					console.log(err);
				})	
	使用swiper
		npm install vue-awesome-swiper --save-dev
		main.js
			import VueAwesomeSwiper from 'vue-awesome-swiper'
			import 'swiper/dist/css/swiper.css'
		使用
			Vue.use(VueAwesomeSwiper)
			<swiper :options="swiperOption" ref="mySwiper">
				<!-- 这部分放你要渲染的那些内容 -->
				<swiper-slide>
					<img src="../../assets/1.png" />
				</swiper-slide>
				<swiper-slide>
					<img src="../../assets/2.png" />
				</swiper-slide>
				<swiper-slide>
					<img src="../../assets/3.png" />
				</swiper-slide>
				<swiper-slide>
					<img src="../../assets/4.png" />
				</swiper-slide>
				<!-- 这是轮播的小圆点 -->
				<div class="swiper-pagination" slot="pagination"></div>
				<div class="swiper-button-prev" slot="button-prev"></div>
				<div class="swiper-button-next" slot="button-next"></div>
			</swiper>
			import { swiper, swiperSlide } from 'vue-awesome-swiper'
			data() {
				return {
					swiperOption: {
						autoplay: {
							stopOnLastSlide: true,
						},
						loop: true,
						pagination: {
							el: '.swiper-pagination'
						},
						navigation: {
							nextEl: '.swiper-button-next',
							prevEl: '.swiper-button-prev'
						},
					}
				}
			},
			components: {
				swiper,
				swiperSlide
			},
			computed: {
				swiper() {
					return this.$refs.mySwiper.swiper;
				}
			},
			禁止滑动
			class='swiper-no-swiping'
	使用vuex
		 	npm install vuex -s
		main.js
			import Vuex from 'vuex'
			import store from './vuex/store'
			新建store内容
			import Vue from 'vue'
			import Vuex from 'vuex'
			
			Vue.use(Vuex)
			
			const store = new Vuex.Store({
			  // 定义状态
			  state: {
			    
			  }
			})
			
			export default store
		按需引入组件
			MyHeader:resolve => require(['./header'],resolve),
			MyFooter:resolve => require(['./footer'],resolve)
		按需路由
			routes: [{
				path: '/home',
				name: 'home',
				component: resolve => require(['@/components/home/home'], resolve)
			}
			
		动画
			.fade-enter-active, .fade-leave-active {
			transform: translateX(0);
			  transition: all .6s;
			}
			.fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {
			  transform: translateX(-100%);
			}
		js控制路由
			this.$router.push({
					name: '' + target + ''
				});
		获取vuex值
			 computed: {
			      back () {	
			        return this.$store.state.back
			      },
			      head () {	
			        return this.$store.state.head
			      }
			    }
	使用高德地图
			在index.html
					<script type="text/javascript" src="http://webapi.amap.com/maps?v=1.4.4&key=3adc59b361b877d943cda0ce50b9b4da"></script>
    				<script src="http://webapi.amap.com/ui/1.0/main.js" type="text/javascript" charset="utf-8"></script>
    		webpack.base.conf.js
    				externals: {
				   	 'AMap': 'AMap'
					}
			vue	
				import AMap from 'AMap'
	相机和相册
		data{
			server:'http://39.107.70.18/Transportation/uploadDriverImage',
			files:[],
			uploadtarget: ''
		}
		methods:{
			upload: function(target) {
				var that = this
				that.files=[]
				that.uploadtarget = target
				var btnArray = [{
					title: "照相机"
				}, {
					title: "相册"
				}]; //选择按钮  1 2 3
				plus.nativeUI.actionSheet({
					title: "请选择",
					cancel: "取消", // 0
					buttons: btnArray
				}, function(e) {
					var index = e.index; // 
					switch(index) {
						case 1:
							//写自己的逻辑
							that.camera();
							break;
						case 2:
							that.album();
							break;
					}
				});
			},
			camera: function() {
				console.log('相机')
				var that = this
				var cmr = plus.camera.getCamera();
				cmr.captureImage(function(p) {
					//成功
					plus.io.resolveLocalFileSystemURL(p, function(entry) {
						var img_name = entry.name; //获得图片名称
						var img_path = entry.toLocalURL(); //获得图片路径
						document.getElementById('img' + that.uploadtarget).setAttribute('src', img_path)
						that.upload_img(img_path);
					}, function(e) {
						alert("读取拍照文件错误：" + e.message);
					});

				}, function(e) {
					alert("失败：" + e.message);
				}, {
					filename: '_doc/camera/',
					index: 1
				}); //  “_doc/camera/“  为保存文件名
			},
			album: function() {
				console.log('相册')
				var that = this
				plus.gallery.pick(function(path) {
					document.getElementById('img' + that.uploadtarget).setAttribute('src', path)
					that.upload_img(path);
				}, function(e) {
					alert("取消选择图片");
				}, {
					filter: "image"
				});
			},
			upload_img: function(p) {
				var that = this
				var n = p.substr(p.lastIndexOf('/') + 1);
				that.files.push({
					name: "uploadkey",
					path: p
				});
				//开始上传
				that.start_upload();
			},
			start_upload: function() {
				var that=this
				if(that.files.length <= 0) {
					plus.nativeUI.alert("没有添加上传文件！");
					return;
				}
				//原生的转圈等待框
				var wt = plus.nativeUI.showWaiting();
				var task = plus.uploader.createUpload(that.server, {
						method: "POST"
					},
					function(t, status) { //上传完成
						if(status == 200) {
							//资源
							var responseText = t.responseText;
							//转换成json
							var json = eval('(' + responseText + ')');
							//上传文件的信息
							that.files = json.data;
							wt.close();
						} else {
							alert("上传失败：" + status);
							//关闭原生的转圈等待框
							wt.close();
						}
					});
				task.addData("uid", that.getUid());
				for(var i = 0; i < that.files.length; i++) {
					var f = that.files[i];
					task.addFile(f.path, {
						key: f.name
					});
				}
				task.start();
			},
			getUid: function() {
				return Math.floor(Math.random() * 100000000 + 10000000).toString();
			}
		}
是用地址选择插件
	npm install v-distpicker --save
	import VDistpicker from 'v-distpicker'

	export default {
	  components: { VDistpicker }
	}
	
		
	Default Value:
	
	<v-distpicker province="广东省" city="广州市" area="海珠区"></v-distpicker>
	Mobile:
	
	<v-distpicker type="mobile"></v-distpicker>
	
	<v-distpicker type="mobile" @selected="onSelected"></v-distpicker>
	

		  	onSelected:function(data){
				this.$store.state.citydata = data.province.value + data.city.value + data.area.value
				console.log(this.$store.state.citydata)
			},
			
子组件调用父组件方法
Parent.vue
		 <child @citychange="citychange"></child>
		 
		  methods: {
	            citychange () {
	                
	            }
	        },
		 
Child.vue
		this.$emit('citychange');
		

使用echart图表	
		cnpm install echarts -S
		
		import echarts from 'echarts'
		
		<div id="myChart"></div>
		
		let myChart = this.$echarts.init(document.getElementById('myChart'))
		myChart.setOption(option）
		
日期选择插件
	npm install vue-mobile-calendar

main.js	
	import Vue from 'vue'
	import Calendar from 'vue-mobile-calendar'

	Vue.use(Calendar)
	
	<calendar
    v-model="calendarShow"
    :defaultDate="defaultDate"
    @change="handelChange">
	</calendar>
	
	handelChange：function(date,formatDate){
	
	}